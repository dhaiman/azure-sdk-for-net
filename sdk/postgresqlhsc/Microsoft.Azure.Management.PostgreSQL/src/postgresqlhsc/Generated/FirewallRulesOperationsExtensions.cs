// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PostgreSQL
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FirewallRulesOperations.
    /// </summary>
    public static partial class FirewallRulesOperationsExtensions
    {
            /// <summary>
            /// Creates a new firewall rule or updates an existing firewall rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='firewallRuleName'>
            /// The name of the server group firewall rule.
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a firewall rule.
            /// </param>
            public static FirewallRule CreateOrUpdate(this IFirewallRulesOperations operations, string resourceGroupName, string serverGroupName, string firewallRuleName, FirewallRule parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, serverGroupName, firewallRuleName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new firewall rule or updates an existing firewall rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='firewallRuleName'>
            /// The name of the server group firewall rule.
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a firewall rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FirewallRule> CreateOrUpdateAsync(this IFirewallRulesOperations operations, string resourceGroupName, string serverGroupName, string firewallRuleName, FirewallRule parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serverGroupName, firewallRuleName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a server group firewall rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='firewallRuleName'>
            /// The name of the server group firewall rule.
            /// </param>
            public static void Delete(this IFirewallRulesOperations operations, string resourceGroupName, string serverGroupName, string firewallRuleName)
            {
                operations.DeleteAsync(resourceGroupName, serverGroupName, firewallRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a server group firewall rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='firewallRuleName'>
            /// The name of the server group firewall rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IFirewallRulesOperations operations, string resourceGroupName, string serverGroupName, string firewallRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serverGroupName, firewallRuleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets information about a server group firewall rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='firewallRuleName'>
            /// The name of the server group firewall rule.
            /// </param>
            public static FirewallRule Get(this IFirewallRulesOperations operations, string resourceGroupName, string serverGroupName, string firewallRuleName)
            {
                return operations.GetAsync(resourceGroupName, serverGroupName, firewallRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about a server group firewall rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='firewallRuleName'>
            /// The name of the server group firewall rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FirewallRule> GetAsync(this IFirewallRulesOperations operations, string resourceGroupName, string serverGroupName, string firewallRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serverGroupName, firewallRuleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all the firewall rules in a given server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            public static IEnumerable<FirewallRule> ListByServerGroup(this IFirewallRulesOperations operations, string resourceGroupName, string serverGroupName)
            {
                return operations.ListByServerGroupAsync(resourceGroupName, serverGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the firewall rules in a given server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<FirewallRule>> ListByServerGroupAsync(this IFirewallRulesOperations operations, string resourceGroupName, string serverGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServerGroupWithHttpMessagesAsync(resourceGroupName, serverGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new firewall rule or updates an existing firewall rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='firewallRuleName'>
            /// The name of the server group firewall rule.
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a firewall rule.
            /// </param>
            public static FirewallRule BeginCreateOrUpdate(this IFirewallRulesOperations operations, string resourceGroupName, string serverGroupName, string firewallRuleName, FirewallRule parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, serverGroupName, firewallRuleName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new firewall rule or updates an existing firewall rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='firewallRuleName'>
            /// The name of the server group firewall rule.
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a firewall rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FirewallRule> BeginCreateOrUpdateAsync(this IFirewallRulesOperations operations, string resourceGroupName, string serverGroupName, string firewallRuleName, FirewallRule parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serverGroupName, firewallRuleName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a server group firewall rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='firewallRuleName'>
            /// The name of the server group firewall rule.
            /// </param>
            public static void BeginDelete(this IFirewallRulesOperations operations, string resourceGroupName, string serverGroupName, string firewallRuleName)
            {
                operations.BeginDeleteAsync(resourceGroupName, serverGroupName, firewallRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a server group firewall rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='firewallRuleName'>
            /// The name of the server group firewall rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IFirewallRulesOperations operations, string resourceGroupName, string serverGroupName, string firewallRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, serverGroupName, firewallRuleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
