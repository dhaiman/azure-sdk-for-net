// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PostgreSQL
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ServerGroupsOperations.
    /// </summary>
    public static partial class ServerGroupsOperationsExtensions
    {
            /// <summary>
            /// Creates a new server group with servers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a server group.
            /// </param>
            public static ServerGroup CreateOrUpdate(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, ServerGroup parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, serverGroupName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new server group with servers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a server group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerGroup> CreateOrUpdateAsync(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, ServerGroup parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serverGroupName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about a server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            public static ServerGroup Get(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName)
            {
                return operations.GetAsync(resourceGroupName, serverGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about a server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerGroup> GetAsync(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serverGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a server group together with servers in it.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            public static void Delete(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName)
            {
                operations.DeleteAsync(resourceGroupName, serverGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a server group together with servers in it.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serverGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates an existing server group. The request body can contain one to many
            /// of the properties present in the normal server group definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='parameters'>
            /// The parameters for updating a server group.
            /// </param>
            public static ServerGroup Update(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, ServerGroupForPatch parameters)
            {
                return operations.UpdateAsync(resourceGroupName, serverGroupName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing server group. The request body can contain one to many
            /// of the properties present in the normal server group definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='parameters'>
            /// The parameters for updating a server group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerGroup> UpdateAsync(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, ServerGroupForPatch parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, serverGroupName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists servers of a server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            public static IEnumerable<ServerGroupServer> ListServers(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName)
            {
                return operations.ListServersAsync(resourceGroupName, serverGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists servers of a server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<ServerGroupServer>> ListServersAsync(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListServersWithHttpMessagesAsync(resourceGroupName, serverGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about a server in server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            public static ServerGroupServer GetServer(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, string serverName)
            {
                return operations.GetServerAsync(resourceGroupName, serverGroupName, serverName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about a server in server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerGroupServer> GetServerAsync(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, string serverName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServerWithHttpMessagesAsync(resourceGroupName, serverGroupName, serverName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restarts the server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            public static void Restart(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName)
            {
                operations.RestartAsync(resourceGroupName, serverGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts the server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestartAsync(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestartWithHttpMessagesAsync(resourceGroupName, serverGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Starts the server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            public static void Start(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName)
            {
                operations.StartAsync(resourceGroupName, serverGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts the server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartAsync(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartWithHttpMessagesAsync(resourceGroupName, serverGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stops the server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            public static void Stop(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName)
            {
                operations.StopAsync(resourceGroupName, serverGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops the server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopAsync(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopWithHttpMessagesAsync(resourceGroupName, serverGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new server group with servers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a server group.
            /// </param>
            public static ServerGroup BeginCreateOrUpdate(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, ServerGroup parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, serverGroupName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new server group with servers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a server group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerGroup> BeginCreateOrUpdateAsync(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, ServerGroup parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serverGroupName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a server group together with servers in it.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            public static void BeginDelete(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName)
            {
                operations.BeginDeleteAsync(resourceGroupName, serverGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a server group together with servers in it.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, serverGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates an existing server group. The request body can contain one to many
            /// of the properties present in the normal server group definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='parameters'>
            /// The parameters for updating a server group.
            /// </param>
            public static ServerGroup BeginUpdate(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, ServerGroupForPatch parameters)
            {
                return operations.BeginUpdateAsync(resourceGroupName, serverGroupName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing server group. The request body can contain one to many
            /// of the properties present in the normal server group definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='parameters'>
            /// The parameters for updating a server group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerGroup> BeginUpdateAsync(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, ServerGroupForPatch parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, serverGroupName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restarts the server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            public static void BeginRestart(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName)
            {
                operations.BeginRestartAsync(resourceGroupName, serverGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts the server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRestartAsync(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRestartWithHttpMessagesAsync(resourceGroupName, serverGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Starts the server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            public static void BeginStart(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName)
            {
                operations.BeginStartAsync(resourceGroupName, serverGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts the server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStartAsync(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStartWithHttpMessagesAsync(resourceGroupName, serverGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stops the server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            public static void BeginStop(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName)
            {
                operations.BeginStopAsync(resourceGroupName, serverGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops the server group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverGroupName'>
            /// The name of the server group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStopAsync(this IServerGroupsOperations operations, string resourceGroupName, string serverGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStopWithHttpMessagesAsync(resourceGroupName, serverGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
