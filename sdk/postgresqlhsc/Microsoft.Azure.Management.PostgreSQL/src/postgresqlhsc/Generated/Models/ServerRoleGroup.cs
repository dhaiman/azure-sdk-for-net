// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PostgreSQL.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a server role group.
    /// </summary>
    public partial class ServerRoleGroup : ServerProperties
    {
        /// <summary>
        /// Initializes a new instance of the ServerRoleGroup class.
        /// </summary>
        public ServerRoleGroup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerRoleGroup class.
        /// </summary>
        /// <param name="serverEdition">The edition of a server (default:
        /// GeneralPurpose). Possible values include: 'GeneralPurpose',
        /// 'MemoryOptimized'</param>
        /// <param name="storageQuotaInMb">The storage of a server in MB (max:
        /// 2097152 = 2TiB).</param>
        /// <param name="vCores">The vCores count of a server (max:
        /// 64).</param>
        /// <param name="standbyCount">The standby count of a server.</param>
        /// <param name="isPublicIpRequested">If public IP is requested or not
        /// for a server.</param>
        /// <param name="name">The name of the server role group.</param>
        /// <param name="role">The role of servers in the server role group.
        /// Possible values include: 'Coordinator', 'Worker'</param>
        /// <param name="serverCount">The number of servers in the server role
        /// group.</param>
        /// <param name="haState">A state of a server role group that is
        /// visible to user for HA feature. Possible values include:
        /// 'NotEnabled', 'CreatingStandby', 'ReplicatingData', 'FailingOver',
        /// 'Healthy', 'RemovingStandby', 'NotSync'</param>
        /// <param name="serverNames">The list of server names in the server
        /// role group.</param>
        public ServerRoleGroup(string serverEdition = default(string), long? storageQuotaInMb = default(long?), long? vCores = default(long?), int? standbyCount = default(int?), bool? isPublicIpRequested = default(bool?), string name = default(string), string role = default(string), int? serverCount = default(int?), string haState = default(string), IList<string> serverNames = default(IList<string>))
            : base(serverEdition, storageQuotaInMb, vCores, standbyCount, isPublicIpRequested)
        {
            Name = name;
            Role = role;
            ServerCount = serverCount;
            HaState = haState;
            ServerNames = serverNames;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the server role group.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the role of servers in the server role group. Possible
        /// values include: 'Coordinator', 'Worker'
        /// </summary>
        [JsonProperty(PropertyName = "role")]
        public string Role { get; set; }

        /// <summary>
        /// Gets or sets the number of servers in the server role group.
        /// </summary>
        [JsonProperty(PropertyName = "serverCount")]
        public int? ServerCount { get; set; }

        /// <summary>
        /// Gets or sets a state of a server role group that is visible to user
        /// for HA feature. Possible values include: 'NotEnabled',
        /// 'CreatingStandby', 'ReplicatingData', 'FailingOver', 'Healthy',
        /// 'RemovingStandby', 'NotSync'
        /// </summary>
        [JsonProperty(PropertyName = "haState")]
        public string HaState { get; set; }

        /// <summary>
        /// Gets the list of server names in the server role group.
        /// </summary>
        [JsonProperty(PropertyName = "serverNames")]
        public IList<string> ServerNames { get; private set; }

    }
}
