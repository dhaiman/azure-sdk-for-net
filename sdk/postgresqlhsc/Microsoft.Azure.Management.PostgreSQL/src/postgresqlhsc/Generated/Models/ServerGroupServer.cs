// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PostgreSQL.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents a server in a server group.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ServerGroupServer : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ServerGroupServer class.
        /// </summary>
        public ServerGroupServer()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerGroupServer class.
        /// </summary>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="serverEdition">The edition of a server (default:
        /// GeneralPurpose). Possible values include: 'GeneralPurpose',
        /// 'MemoryOptimized'</param>
        /// <param name="storageQuotaInMb">The storage of a server in MB (max:
        /// 2097152 = 2TiB).</param>
        /// <param name="vCores">The vCores count of a server (max:
        /// 64).</param>
        /// <param name="standbyCount">The standby count of a server.</param>
        /// <param name="isPublicIpRequested">If public IP is requested or not
        /// for a server.</param>
        /// <param name="role">The role of server in the server group. Possible
        /// values include: 'Coordinator', 'Worker'</param>
        /// <param name="state">A state of a server that is visible to user.
        /// Possible values include: 'Ready', 'Dropping', 'Disabled',
        /// 'Starting', 'Stopping', 'Stopped', 'Updating'</param>
        /// <param name="haState">A state of a server group that is visible to
        /// user for HA feature. Possible values include: 'NotEnabled',
        /// 'CreatingStandby', 'ReplicatingData', 'FailingOver', 'Healthy',
        /// 'RemovingStandby', 'NotSync'</param>
        /// <param name="administratorLogin">The administrator's login name of
        /// a servers in server group.</param>
        /// <param name="version">The version of a server. Possible values
        /// include: '11', '12'</param>
        public ServerGroupServer(string id = default(string), string name = default(string), string type = default(string), string serverEdition = default(string), long? storageQuotaInMb = default(long?), long? vCores = default(long?), int? standbyCount = default(int?), bool? isPublicIpRequested = default(bool?), string role = default(string), string state = default(string), string haState = default(string), string administratorLogin = default(string), string version = default(string))
            : base(id, name, type)
        {
            ServerEdition = serverEdition;
            StorageQuotaInMb = storageQuotaInMb;
            VCores = vCores;
            StandbyCount = standbyCount;
            IsPublicIpRequested = isPublicIpRequested;
            Role = role;
            State = state;
            HaState = haState;
            AdministratorLogin = administratorLogin;
            Version = version;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the edition of a server (default: GeneralPurpose).
        /// Possible values include: 'GeneralPurpose', 'MemoryOptimized'
        /// </summary>
        [JsonProperty(PropertyName = "properties.serverEdition")]
        public string ServerEdition { get; set; }

        /// <summary>
        /// Gets or sets the storage of a server in MB (max: 2097152 = 2TiB).
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageQuotaInMb")]
        public long? StorageQuotaInMb { get; set; }

        /// <summary>
        /// Gets or sets the vCores count of a server (max: 64).
        /// </summary>
        [JsonProperty(PropertyName = "properties.vCores")]
        public long? VCores { get; set; }

        /// <summary>
        /// Gets or sets the standby count of a server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.standbyCount")]
        public int? StandbyCount { get; set; }

        /// <summary>
        /// Gets if public IP is requested or not for a server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isPublicIpRequested")]
        public bool? IsPublicIpRequested { get; private set; }

        /// <summary>
        /// Gets or sets the role of server in the server group. Possible
        /// values include: 'Coordinator', 'Worker'
        /// </summary>
        [JsonProperty(PropertyName = "properties.role")]
        public string Role { get; set; }

        /// <summary>
        /// Gets or sets a state of a server that is visible to user. Possible
        /// values include: 'Ready', 'Dropping', 'Disabled', 'Starting',
        /// 'Stopping', 'Stopped', 'Updating'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets a state of a server group that is visible to user for
        /// HA feature. Possible values include: 'NotEnabled',
        /// 'CreatingStandby', 'ReplicatingData', 'FailingOver', 'Healthy',
        /// 'RemovingStandby', 'NotSync'
        /// </summary>
        [JsonProperty(PropertyName = "properties.haState")]
        public string HaState { get; set; }

        /// <summary>
        /// Gets or sets the administrator's login name of a servers in server
        /// group.
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorLogin")]
        public string AdministratorLogin { get; set; }

        /// <summary>
        /// Gets or sets the version of a server. Possible values include:
        /// '11', '12'
        /// </summary>
        [JsonProperty(PropertyName = "properties.version")]
        public string Version { get; set; }

    }
}
