// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PostgreSQL.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a server group for update.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ServerGroupForPatch
    {
        /// <summary>
        /// Initializes a new instance of the ServerGroupForPatch class.
        /// </summary>
        public ServerGroupForPatch()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerGroupForPatch class.
        /// </summary>
        /// <param name="location">The location the resource resides
        /// in.</param>
        /// <param name="administratorLogin">The administrator's login name of
        /// servers in server group. Can only be specified when the server is
        /// being created (and is required for creation).</param>
        /// <param name="backupRetentionDays">The backup retention days for
        /// server group.</param>
        /// <param name="version">The version of servers. Possible values
        /// include: '11', '12'</param>
        /// <param name="citusVersion">The citus version of servers. Possible
        /// values include: '8.3', '9.0', '9.1', '9.2', '9.3', '9.4',
        /// '9.5'</param>
        /// <param name="isMx">If zfs is enabled or not for the server
        /// group.</param>
        /// <param name="isZfs">If zfs is enabled or not for the server
        /// group.</param>
        /// <param name="state">A state of a server group that is visible to
        /// user. Possible values include: 'Ready', 'Dropping', 'Disabled',
        /// 'Starting', 'Stopping', 'Stopped', 'Updating'</param>
        /// <param name="earliestRestoreTime">The earliest restore point time
        /// (ISO8601 format) for server group.</param>
        /// <param name="resourceProviderType">The resource provider type of
        /// server group. Possible values include: 'Meru', 'Marlin'</param>
        /// <param name="vnetInjArgs">The vnet injection arguments for server
        /// group.</param>
        /// <param name="serverRoleGroups">The list of server role
        /// groups.</param>
        /// <param name="administratorLoginPassword">The password of the
        /// administrator login.</param>
        /// <param name="tags">Application-specific metadata in the form of
        /// key-value pairs.</param>
        public ServerGroupForPatch(string location = default(string), string administratorLogin = default(string), int? backupRetentionDays = default(int?), string version = default(string), string citusVersion = default(string), bool? isMx = default(bool?), bool? isZfs = default(bool?), string state = default(string), System.DateTime? earliestRestoreTime = default(System.DateTime?), string resourceProviderType = default(string), VnetInjArgs vnetInjArgs = default(VnetInjArgs), IList<ServerRoleGroup> serverRoleGroups = default(IList<ServerRoleGroup>), string administratorLoginPassword = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            Location = location;
            AdministratorLogin = administratorLogin;
            BackupRetentionDays = backupRetentionDays;
            Version = version;
            CitusVersion = citusVersion;
            IsMx = isMx;
            IsZfs = isZfs;
            State = state;
            EarliestRestoreTime = earliestRestoreTime;
            ResourceProviderType = resourceProviderType;
            VnetInjArgs = vnetInjArgs;
            ServerRoleGroups = serverRoleGroups;
            AdministratorLoginPassword = administratorLoginPassword;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the location the resource resides in.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets the administrator's login name of servers in server
        /// group. Can only be specified when the server is being created (and
        /// is required for creation).
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorLogin")]
        public string AdministratorLogin { get; set; }

        /// <summary>
        /// Gets or sets the backup retention days for server group.
        /// </summary>
        [JsonProperty(PropertyName = "properties.backupRetentionDays")]
        public int? BackupRetentionDays { get; set; }

        /// <summary>
        /// Gets or sets the version of servers. Possible values include: '11',
        /// '12'
        /// </summary>
        [JsonProperty(PropertyName = "properties.version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets the citus version of servers. Possible values include:
        /// '8.3', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5'
        /// </summary>
        [JsonProperty(PropertyName = "properties.citusVersion")]
        public string CitusVersion { get; set; }

        /// <summary>
        /// Gets or sets if zfs is enabled or not for the server group.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isMx")]
        public bool? IsMx { get; set; }

        /// <summary>
        /// Gets or sets if zfs is enabled or not for the server group.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isZfs")]
        public bool? IsZfs { get; set; }

        /// <summary>
        /// Gets or sets a state of a server group that is visible to user.
        /// Possible values include: 'Ready', 'Dropping', 'Disabled',
        /// 'Starting', 'Stopping', 'Stopped', 'Updating'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public string State { get; set; }

        /// <summary>
        /// Gets the earliest restore point time (ISO8601 format) for server
        /// group.
        /// </summary>
        [JsonProperty(PropertyName = "properties.earliestRestoreTime")]
        public System.DateTime? EarliestRestoreTime { get; private set; }

        /// <summary>
        /// Gets or sets the resource provider type of server group. Possible
        /// values include: 'Meru', 'Marlin'
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceProviderType")]
        public string ResourceProviderType { get; set; }

        /// <summary>
        /// Gets or sets the vnet injection arguments for server group.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vnetInjArgs")]
        public VnetInjArgs VnetInjArgs { get; set; }

        /// <summary>
        /// Gets or sets the list of server role groups.
        /// </summary>
        [JsonProperty(PropertyName = "properties.serverRoleGroups")]
        public IList<ServerRoleGroup> ServerRoleGroups { get; set; }

        /// <summary>
        /// Gets or sets the password of the administrator login.
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorLoginPassword")]
        public string AdministratorLoginPassword { get; set; }

        /// <summary>
        /// Gets or sets application-specific metadata in the form of key-value
        /// pairs.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

    }
}
