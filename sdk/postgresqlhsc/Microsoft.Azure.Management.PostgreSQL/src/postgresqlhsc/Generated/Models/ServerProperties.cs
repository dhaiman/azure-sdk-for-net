// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PostgreSQL.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The properties of a server.
    /// </summary>
    public partial class ServerProperties
    {
        /// <summary>
        /// Initializes a new instance of the ServerProperties class.
        /// </summary>
        public ServerProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerProperties class.
        /// </summary>
        /// <param name="serverEdition">The edition of a server (default:
        /// GeneralPurpose). Possible values include: 'GeneralPurpose',
        /// 'MemoryOptimized'</param>
        /// <param name="storageQuotaInMb">The storage of a server in MB (max:
        /// 2097152 = 2TiB).</param>
        /// <param name="vCores">The vCores count of a server (max:
        /// 64).</param>
        /// <param name="standbyCount">The standby count of a server.</param>
        /// <param name="isPublicIpRequested">If public IP is requested or not
        /// for a server.</param>
        public ServerProperties(string serverEdition = default(string), long? storageQuotaInMb = default(long?), long? vCores = default(long?), int? standbyCount = default(int?), bool? isPublicIpRequested = default(bool?))
        {
            ServerEdition = serverEdition;
            StorageQuotaInMb = storageQuotaInMb;
            VCores = vCores;
            StandbyCount = standbyCount;
            IsPublicIpRequested = isPublicIpRequested;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the edition of a server (default: GeneralPurpose).
        /// Possible values include: 'GeneralPurpose', 'MemoryOptimized'
        /// </summary>
        [JsonProperty(PropertyName = "serverEdition")]
        public string ServerEdition { get; set; }

        /// <summary>
        /// Gets or sets the storage of a server in MB (max: 2097152 = 2TiB).
        /// </summary>
        [JsonProperty(PropertyName = "storageQuotaInMb")]
        public long? StorageQuotaInMb { get; set; }

        /// <summary>
        /// Gets or sets the vCores count of a server (max: 64).
        /// </summary>
        [JsonProperty(PropertyName = "vCores")]
        public long? VCores { get; set; }

        /// <summary>
        /// Gets or sets the standby count of a server.
        /// </summary>
        [JsonProperty(PropertyName = "standbyCount")]
        public int? StandbyCount { get; set; }

        /// <summary>
        /// Gets if public IP is requested or not for a server.
        /// </summary>
        [JsonProperty(PropertyName = "isPublicIpRequested")]
        public bool? IsPublicIpRequested { get; private set; }

    }
}
